from typing import Optional, Generic, TypeVar, overload

_T = TypeVar('_T')

class Statement:
    class Visitor:
        def visit_module_block(self, statement: ModuleBlock) -> None: ...
        def visit_class(self, statement: Class) -> None: ...
        def visit_vtable(self, statement: VTable) -> None: ...
        def visit_vtable_entry(self, statement: VTableEntry) -> None: ...
        def visit_linked_module_block(self, statement: LinkedModuleBlock) -> None: ...
    def accept(self, visitor: Visitor) -> None: ...

class ModuleBlock(Statement, Generic[_T]):
    module: str
    statements: list[_T]
    def __init__(self, module: str, statements: list[_T]) -> None: ...

class Class(Statement):
    _class_sizes: dict[str, Size]

    identifier: str
    bases: list[Class]
    offset: int
    _size: Size
    vtable: Optional[VTable]
    @overload
    def __init__(self, identifier: str, bases: list[Class], offset: int, size: int) -> None: ...
    @overload
    def __init__(self, identifier: str, bases: list[Class], offset: int, size: int, vtable: VTable) -> None: ...
    def set_size(self, size: int, is_determined: bool) -> None: ...
    def get_size(self) -> int: ...
    def is_determined_size(self) -> bool: ...
    def clone(self) -> Class: ...
    def accept(self, visitor: Statement.Visitor) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class Size:
    size: int
    is_determined: bool
    def __init__(self, size: int) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class VTable:
    m_flag: bool
    v_flag: bool
    a_flag: bool
    address: int
    relative_address: int
    owner: str
    identifier: str
    vtable_count: int
    vtable_entry_list: list[VTableEntry]
    def __init__(
            self,
            m_flag: bool,
            v_flag: bool,
            a_flag: bool,
            address: int,
            relative_address: int,
            owner: str,
            identifier: str,
            vtable_count: int,
            vtable_entry_list: list[VTableEntry]
    ) -> None: ...
    def accept(self, visitor: Statement.Visitor) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class VTableEntry:
    index: int
    address: int
    relative_address: int
    function: Function
    def __init__(self, index: int, address: int, relative_address: int, function_identifier: str) -> None: ...
    def accept(self, visitor: Statement.Visitor) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class LinkedModuleBlock(Statement):
    module: str
    classes: list[Class]
    vtables: list[VTable]
    def __init__(self, module: str, classes: list[Class], vtables: list[VTable]) -> None: ...
    def accept(self, visitor: Statement.Visitor) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class Function:
    identifier: str
    definer: Optional[Class]
    implementer: Optional[Class]
    def __init__(self, identifier: str, definer: Optional[Class], implementer: Optional[Class]) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
